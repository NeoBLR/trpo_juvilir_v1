<Window x:Class="trpo_juvilir_v1.database"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:trpo_juvilir_v1"
        mc:Ignorable="d"
        xmlns:fw="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
        fw:AcrylicWindow.Enabled="True"
        Title="database" Height="450" Width="600" AllowsTransparency="True" WindowStyle="None" Style="{DynamicResource winreg}" Background="#7F1C1A32" BorderBrush="#CCFE8256" Icon="img/icon.png">
    <Window.Resources>
        <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                <Grid>
                    <AdornerDecorator>
                        <ContentPresenter/>
                    </AdornerDecorator>
                    <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                        <Condition Property="WindowState" Value="Normal"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="winreg" TargetType="{x:Type Window}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Border CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <AdornerDecorator>
                                <ContentPresenter/>
                            </AdornerDecorator>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                    <Setter Property="Template" Value="{StaticResource WindowTemplateKey}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#19BEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#193C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#19C4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#192C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="btn_grad" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Opacity" Value="0.8"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>



    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="25"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid Name="toolbar" Grid.Row="0" MouseDown="toolbar_MouseDown"  MouseLeftButtonDown="toolbar_MouseLeftButtonDown">

            <Rectangle RadiusX="5" RadiusY="5" Height="50" Margin="0">
                <Rectangle.Fill>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="1,0">
                        <GradientStop Color="#FFFFE53B" Offset="0"/>
                        <GradientStop Color="#FFFC007A" Offset="1"/>
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>
            <Label Content="Ювилирная Мастерская" HorizontalAlignment="Center" Foreground="White"></Label>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0 0 10 0">

                <Image Name="ShowBtn" Height="20" Width="20" Margin="0 0 3 0" MouseDown="ShowBtn_MouseDown">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Source" Value="/img/toolbar_show_off.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMouseOver, ElementName=ShowBtn}" Value="True">
                                    <Setter Property="Source" Value="/img/toolbar_show.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <Image Name="HideBtn" Height="20" Width="20" Margin="0 0 3 0" MouseDown="HideBtn_MouseDown">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Source" Value="/img/toolbar_hide_off.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMouseOver, ElementName=HideBtn}" Value="True">
                                    <Setter Property="Source" Value="/img/toolbar_hide.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <Image Name="CloseBtn" Height="20" Width="20" MouseDown="CloseBtn_MouseDown">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Source" Value="/img/toolbar_closed_off.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMouseOver, ElementName=CloseBtn}" Value="True">
                                    <Setter Property="Source" Value="/img/toolbar_closed.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

            </StackPanel>

        </Grid>
        
        <TabControl Grid.Row="1"  Background="{x:Null}" BorderBrush="{x:Null}" SelectionChanged="TabControl_SelectionChanged" Foreground="White">
            <TabControl.Resources>
                <Style TargetType="TabItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabItem">
                                <Grid Name="Panel">
                                    <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Panel" Property="Background" Value="#19FFFFFF" />
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="False">
                                        <Setter TargetName="Panel" Property="Background" Value="#19FFFFFF" />
                                        <Setter TargetName="Panel" Property="Opacity" Value="0.8" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>
            <TabItem Height="30" Header="Клиент" BorderBrush="{x:Null}" Background="{x:Null}" Foreground="White">
                <Grid>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height=".8*"/>
                            <RowDefinition Height="3*"/>
                            <RowDefinition Height="3*"/>


                        </Grid.RowDefinitions>

                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>



                            </Grid.ColumnDefinitions>
                            <Button Content="Добавить" Grid.Column="0"  FontSize="12" Foreground="White" Style="{DynamicResource btn_grad}" Background="#19FFFFFF" Click="Button_Click_1"/>
                            <Button Content="Изменить" Grid.Column="1"   FontSize="12" Foreground="White" Style="{DynamicResource btn_grad}" Background="#19FFFFFF"/>
                            <Button Content="Удалить" Grid.Column="2"   FontSize="12" Foreground="White" Style="{DynamicResource btn_grad}" Background="#19FFFFFF"/>
                            <Button Content="Обновить" Grid.Column="3"   FontSize="12" Foreground="White" Style="{DynamicResource btn_grad}" Background="#19FFFFFF" Click="Button_Click_2"/>


                        </Grid>


                        <DataGrid x:Name="goJob" ColumnWidth="*" Grid.Row="1" Margin="0" VerticalAlignment="Top" HeadersVisibility="Column" IsReadOnly="True" RowBackground="#19FFFFFF" HorizontalGridLinesBrush="#4C000000" VerticalGridLinesBrush="#4C000000" Foreground="White">
                            <DataGrid.Resources>
                                <Style TargetType="{x:Type DataGridColumnHeader}">
                                    <Setter Property="Padding" Value="10 0 10 0"/>
                                    <Setter Property="Foreground" Value="White"/>
                                    <Setter Property="Background" Value="#19FFFFFF"/>
                                    <Setter Property="FontWeight" Value="Light"/>
                                    <Setter Property="BorderBrush" Value="#FFFC007A"/>
                                    <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                    <Setter Property="Height" Value="30"/>


                                </Style>


                                <Style TargetType="{x:Type DataGrid}">

                                    <Setter Property="BorderBrush" Value="#0000"/>
                                    <Setter Property="Background" Value="#001C1A32"/>
                                </Style>
                            </DataGrid.Resources>
                        </DataGrid>

                    </Grid>

                </Grid>
            </TabItem>
            <TabItem Height="30" Header="Мастер" BorderBrush="{x:Null}" Background="{x:Null}" Foreground="White">
                <Grid>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height=".8*"/>
                            <RowDefinition Height="3*"/>
                            <RowDefinition Height="3*"/>


                        </Grid.RowDefinitions>

                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>


                            </Grid.ColumnDefinitions>
                            <Button Content="Добавить" Grid.Column="0"  FontSize="12" Foreground="White" Style="{DynamicResource btn_grad}" Background="#19FFFFFF"/>
                            <Button Content="Изменить" Grid.Column="1"   FontSize="12" Foreground="White" Style="{DynamicResource btn_grad}" Background="#19FFFFFF"/>
                            <Button Content="Удалить" Grid.Column="2"   FontSize="12" Foreground="White" Style="{DynamicResource btn_grad}" Background="#19FFFFFF"/>

                        </Grid>


                        <DataGrid x:Name="goJob2" ColumnWidth="*" Grid.Row="1" Margin="0" VerticalAlignment="Top" HeadersVisibility="Column" IsReadOnly="True" RowBackground="#19FFFFFF" HorizontalGridLinesBrush="#4C000000" VerticalGridLinesBrush="#4C000000" Foreground="White">
                            <DataGrid.Resources>
                                <Style TargetType="{x:Type DataGridColumnHeader}">
                                    <Setter Property="Padding" Value="10 0 10 0"/>
                                    <Setter Property="Foreground" Value="White"/>
                                    <Setter Property="Background" Value="#19FFFFFF"/>
                                    <Setter Property="FontWeight" Value="Light"/>
                                    <Setter Property="BorderBrush" Value="#FFFC007A"/>
                                    <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                    <Setter Property="Height" Value="30"/>


                                </Style> 


                                <Style TargetType="{x:Type DataGrid}">

                                    <Setter Property="BorderBrush" Value="#0000"/>
                                    <Setter Property="Background" Value="#001C1A32"/>
                                </Style>
                            </DataGrid.Resources>
                        </DataGrid>

                    </Grid>

                </Grid>
            </TabItem>
        </TabControl>



    </Grid>



</Window>
